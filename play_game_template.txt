    
    camera = Camera()
    bg_first = BackGround(-4000, DICTIONARY_SPITES['Background'], [all_sprites, background_group])
    bg_second = BackGround(0, DICTIONARY_SPITES['Background'], [all_sprites, background_group])
        if load_flag:
        hero, hero_pos_x, hero_pos_y, coord_checkpoints, exit_pos = generate_level(load_level(load_map),
                                                                                   (all_sprites, hero_group),
                                                                                   (bound_group, all_sprites))
        with open(load_data, 'r', encoding='utf-8') as file:
            lines_load = file.readlines()
            for line_load in lines_load:
                pass
    else:
        hero, hero_pos_x, hero_pos_y, coord_checkpoints, exit_pos = generate_level(load_level('Levels/level1'),
                                                                                   (all_sprites, hero_group),
                                                                                   (bound_group, all_sprites))
    for sprite in whero_group.sprites():
        sprite.fall()

    running_game = True
    cur_dialog = []
    while running_game:
        game_time_delta = clock.tick() / 1000

        if hero.health <= 0:
            return

        for event_game in pygame.event.get():
            if event_game.type == pygame.QUIT or (event_game.type == pygame.KEYDOWN and
                                                  event_game.key == pygame.K_ESCAPE):
                try:
                    active_pause_menu()
                except ExitToMenuException:
                    running_game = False

            UIManager.process_events(event_game)
            all_sprites.update()

        UIManager.update(game_time_delta)
        all_sprites.update()
        hero.collide_books()

        # Движение BackGround`а (бесконечный фон)
        move_background(bg_first, bg_second)

        camera.update(hero)
        # обновляем положение всех спрайтов
        for sprite in all_sprites:
            camera.apply(sprite)
        for sprite in invisible_bound:
            camera.apply(sprite)

        screen.fill((0, 0, 0))

        all_sprites.draw(screen)
        hero_group.draw(screen)
        draw_text_data([f"Собрать книги. {hero.counter_books}/{hero.all_books}", f"HP: {hero.health}"])
        UIManager.draw_ui(screen)
        pygame.display.flip()

        if cur_dialog:
            try:
                show_dialog(cur_dialog)
            except ExitToMenuException:
                running_game = False
            cur_dialog = []