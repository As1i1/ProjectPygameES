1. Вступление:
 - Добрый день. Меня зовут Дмитрий Дубинин.
 - Я Дунаев Кирилл. 
 - Мы участики проекта "Яндекс.Лицей" и сегодня хотели бы презентовать вам наш проект по библиотеке Python`а Pygame - игру Everlasting memories. 
 
2. Об игре:
 - Эта игра является нашем отражением возможного продолжения игры "Бесконечное лето". В ней мы хотели бы передать, как могла бы сложиться судьба главных героев оригинальной игры, и дать свое объяснение некоторым деталям сюжета.
 - Главные герои игры: Семен, Лена, Пионер, Славя, Мику, Алиса. Именно в таком порядке они и будут показаны геймеру в процессе игры. Семен является протагонистом, за него нам и придется играть, Пионер в свою очередь - антагонистом. 
 - Семен не помнит события, произошедшие в оригинальной игре, в отличие от остальных персонажей. Пионер хочет помочь ему вспомнить их, но делает это в корыстных целях.
 - Игра начинается со встречи Лены и Семена, после которой они договариваются встретиться вновь, но сделать это им не удается. Пионер же хочет помочь Семену найти Лену.
 - В течение игры главному герою предстоит пройти несколько уровей, в которых он познакомится с персонажами, слова и характер которых помогут понять глубину сюжета.
 - По пути ему будут встречаться противники, от которых он сможет отбиваться посредством кидания мешка с сахаром.
 - В конце игры оказывается, что Семен и Пионер связаны, и что Пионер использовал Семена. Цель героя уже состоит в том, чтобы победить Пионера. В этом ему сможет помочь одна из девушек, с которой он впоследствии может остаться, в зависимости от принятых во время игры решений.
 - Всего запланировано 12 концовок - хорошая и плохая для каждой девушки, а так же хорошая и плохая концовка одиночки.
 - Получая одну из концовкок, вы зарабатываете достижение. Так же их можно заработать во время игры за определенные действия: допустим, достижение "Неуязвимый" дается за победу над Пионером без получения урона.
 
3. Теперь поговорим немного про код:
 - Из-за особенностей библиотеки Pygame (а именно её низкоуровневости) бОльшая часть кода - функции, отвечающие за циклы Pygame'a для конкретых ситуаций (меню, пауза, уровень и т.д.)
 - Классы же выделены такие: 
   1) Camera - для отслеживания и изменения положения обьектов относительно ГГ
   2) Bound - для препятствий 
   3) BackGround - для заднего фона
   4) Book и BookParticle - для "очков достижений" и их эффектов
   5) AnimatedSprite - реализует смену спрайтов у одного персонажа(спрайт - это один кадр движения объекта или просто его статичное положения)   
   6) BaseEnemy, Enemy, Hero - используютя для ГГ и врагов. Классы Enemy и Hero наследуются от BaseEnemy. BaseEnemy наследуется от AnimatedSprite.
   7) Projectile - для снарядов главного героя.
   8) WHero - для второстепенных персонажей, которыми мы не управляем.
   9) Классы FallingAsphalt, MagicShield, BossHP, BossProjectile, Boss - используются в финальной битве с боссом. Последний из перечисленных наследован от класса WHero.
   10) Отдельного внимания заслуживают классы AudioManager и GameManager. Данные классы упрощают работу с обьектами и предназначены для работы с музыкой и уровнями соответственно.

 - Особенности:
   1) При работе в команде возникает вопрос, как поддерживать актуальную версию кода на нескольких компьютерах. Эту и ещё несколько проблем помогает решить такая платформа, как GitHub. Несколько её плюсов:
		· Сохраняет код при поломках
		· Хранит много версий кода программы и позволяет легко переключаться между ними
		· Помогает разработчикам обмениваться кодом и редактировать один и тот же код с разных устройств
		· Объединяет результаты труда нескольких разработчиков
		
   2) Так как pygame по стандарту не продоставляет никаких возможностей по отрисовке пользовательского интерфейса, использована библиотека pygame_gui. Она содержит множество классов, таких как кнопки, информационные окна и т.д.
		При этом она дает возможность кастомизации (изменения оформления) каждого объекта. В нашей игре есть несколько стилей, один из которых выбирается случайным образом при запуске игры. Вот несколько примеров главного меню с разными стилями...
		К тому же, если игроку повезёт, и выпадет самый редкий стиль (с шансом выпадения 0.1%), то он получит достижение, и попадет в "интересную ситуацию" при попытке выхода из игры.
	
   3) Говоря про главное меню, стоит ещё упомянуть "реакцию" игры на действия пользователя: при наведении на кнопки, можно наблюдать разные эмоции у персонажей.
	
   4) Реализована система настроек игры, позволяющая менять управление и громкость музыки. Сами настройки хранятся в формате json (этот формат позволяет легко записывать данные в файл как в словарь, и так же оперативно загружать данные из файла в код)
   
   5) Уровень с боссом кардинально отличается от остальных, так как вводит множество новых испытаний для игрока. Битва происходит в несколько этапов. На первом этапе босс пытается победить игрока посредством своих приспешников и некоторой магии (падающего асфальта).
		На втором этапе, он вступет в бой сам. Вокруг него магический щит, который не получится пробить просто так, нужно проявить логику. В это же время босс будет стрелять в игрока.
	
   6) При отрисовке получений достижений и урона появилась проблема - игра в этом момент останавливалась, чего допускать, конечно же, нельзя. На помощь пришла библиотека threading, которая позволила вести отрисовку достижений и урона параллельно с отрисовкой самого игрового процесса.
   
   7) В любой момент времени игрок может включить паузу, все действия на уровне застынут, и откроется меню, где можно будет продолжить игру, загрузиться, сохраниться, открыть настройки или выйти.
   
   8) Смерть на одном из уровней сопровождается появлением послесмертного экрана, где игроку будет предложено перезапустить уровень, загрузить сохранение или же выйти из игры.
   
   9) Начальная заставка - зацикленное видео, а в связи с тем, что из библиотеки Pygame был удален модуль movie, отвечающий за видео, оно покадрово обрабатывается библиотекой cv2, затем попиксельно перерабатывается в кадр, пригодный для pygame, после чего уже выводится на экран.
   
   10) Отдельно стоит сказать про класс GameManager, который отвечает за уровни игры и за данные, связанные с ними.
		Атрибуты, одинаково нужные для каждого уровня инициализируются каждый раз при запуске уровня, если же происходит загрузка с помощью сохранения, то достаёт данные из сохранённых файлов.
		Каждый уровень представлен как метод данного класса.
		Таким образом, сохранить сессию не составляет труда: достаточно сохранить нужные атрибуты класса
		
 
 ---*Демонстрация игры*---
 
- Часть мультимедии, представленная в игре, была взята с открытых источников, остальная - создана в программах Photoshop и Premiere Pro. 
- Огромное спасибо хочется выразить разработчикам игры Бесконечное лето за вдохновение, подаренное при прохождении их детища.
- А вам спасибо за внимание.